samples=["A_1_21"]

rule all:
    input:
       expand("results/variant_discovery/{sample}_HC.g.vcf",sample=samples)

rule map_reads:
    input:
        genome="data/GCA_904849725_genome.fa",
        read1="data/samples/{sample}_1.fastq",
        read2="data/samples/{sample}_2.fastq"
    output:
        "results/mapped/{sample}.bam"
    conda:
        "env/mapping.yaml"
    shell:
        "bwa mem {input.genome} {input.read1} {input.read2} | samtools view -Sb - > {output}"

rule sort_bam:
    input:
        "results/mapped/{sample}.bam"
    output:
        "results/sorted/{sample}_sorted.bam"
    conda:
        "env/mapping.yaml"
    shell:
        "samtools sort -o {output} {input}"

#rule depth_calc:
#    input:
#        "results/sorted/{sample}_sorted.bam"
#    output:
#        "results/depth/{sample}_depth.csv"
#    shell:
#        "samtools depth {input} > {output}"

#rule plot_depth:
#    input:
#        "results/depth/{sample}_depth.csv"
#    output:
#        "results/depth/plots/{sample}.svg"
#    script:
#        "plot-depth.py"

rule mark_duplicates:
    input: 
        "results/sorted/{sample}_sorted.bam"
    output:
        marked_bam="results/duplicated/{sample}_marked.bam",
        metrics="results/duplicated/{sample}_marked.txt"
    shell:
        "/home/cmiravete/Descargas/gatk-4.4.0.0/gatk MarkDuplicates -I {input} -O {output.marked_bam} -M {output.metrics}  "

rule variant_discovery:
    input:
        ref= "data/GCA_904849725_genome.fa",
        bam= "results/duplicated/{sample}_marked.bam"

    output:
        "results/variant_discovery/{sample}_HC.g.vcf"
    shell:
         "/home/cmiravete/Descargas/gatk-4.4.0.0/gatk HaplotypeCaller -R {input.ref} -I {input.bam} -O {output} -bamount bamount.bam"

prueba de ordenar e indexar

rule sort_bam:
    input:
        "results/duplicated/{sample}_marked.bam"
    output:
        "results/sorted/{sample}_markedsorted.bam"
    conda:
        "env/mapping.yaml"
    shell:
        "samtools sort -o {output} {input}"
rule index:
   input: 
     "results/sorted/{sample}_markedsorted.bam"
   output:
      "results/indexed/{sample}_marked.bam.bai"
   shell:
      "samtools index -M {output} {input}"


-------------------------------DEFINITIVO

#-------Depth Analysis-----------
rule depth_calc:
    input:
        "results/sorted/{sample}_sorted.bam"
    output:
        "results/depth/{sample}_depth.csv"
    shell:
        "samtools depth {input} > {output}"

rule plot_depth:
    input:
        "results/depth/{sample}_depth.csv"
    output:
        "results/depth/plots/{sample}.svg"
    script:
        "plot-depth.py"

#-------Depth Analysis-----------


#Step 3: Prepare reference genome

rule ref_genome:
    input:
        "data/GCA_904849725_genome.fa"
    shell:
        "bwa index -a bwtsw {input}"      

rule map_reads:
    input:
       genome="data/GCA_904849725_genome.fa",
       read1="data/samples/{sample}_1.fastq",
       read2="data/samples/{sample}_2.fastq"
    output:
       "results/mapped/{sample}_RG.bam"
    params:
        rg=r"-R '@RG\tID:Seq01a\tSM:sample_A_1_21\tPL:ILLUMINA'"
    conda:
       "env/mapping.yaml"
    shell:
       "bwa mem {params.rg} {input.genome} {input.read1} {input.read2} | samtools view -Sb - > {output}"
   
rule sort_bam:
    input:
        "results/mapped/{sample}_RG.bam"
    output:
        "results/sorted/{sample}_sorted.bam"
    conda:
        "env/mapping.yaml"
    shell:
        "samtools sort -o {output} {input}"


rule mark_duplicates:
    input: 
        "results/sorted/{sample}_sorted.bam"
    output:
        marked_bam="results/markdup/{sample}_nodup.bam",
        metrics="results/markdup/{sample}_nodup.txt"
    shell:
        "java -jar /home/cmiravete/Descargas/picard.jar  MarkDuplicates -I {input} -O {output.marked_bam} -M {output.metrics}"

#samtools index -c /home/cmiravete/project/snakemake-project/results/markdup/A_1_21_nodup.bam

#rule haplotype_caller:
#    input:
#        bam="results/markdup/{sample}_nodup.bam",
#        ref="/home/cmiravete/project/snakemake-project/data/GCA_904849725_genome.fa"
#    output:
#        "calls/{sample}.g.vcf"
#    shell:
#        "/home/cmiravete/Descargas/gatk-4.4.0.0/gatk --java-options  '-Xmx4g'  HaplotypeCaller -R {input.ref} -I {input.bam} -O {output} -ERC GVCF"

------------

ultimo

#Step 2: QUALITY CONTROL
#rule quality_control:
    input:
        "data/samples/{sample}.fastq"
    output:
        "data/samples/{sample}_fastqc.html"
    shell:
        "fastqc {input} | mv {output} > data/samples/QC_reports/"

rule ref_genome:
    input:
        "data/GCA_904849725_genome.fa"
    shell:
        "bwa index -a bwtsw {input}"      

rule map_reads:
    input:
       genome="data/GCA_904849725_genome.fa",
       read1="data/samples/{sample}.fastq",
       read2="data/samples/{sample}.fastq"
    output:
       "results/mapped/{sample}_RG.bam"
    params:
        rg=r"-R '@RG\tID:Seq01a\tSM:sample_A_1_21\tPL:ILLUMINA'"
    conda:
       "env/mapping.yaml"
    shell:
       "bwa mem {params.rg} {input.genome} {input.read1} {input.read2} | samtools view -Sb - > {output}"
   

