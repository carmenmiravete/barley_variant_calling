rule all: #this is to start with that file (in terminal: snakemake -n)
    input:
        "plots/quals.svg"


#Step 1: DESCOMPRESS tic
rule descompress:
    input:
        "data/compressed_samples/{samples}.fastq.gz"
    output:
        "data/samples/{samples}.fastq"
    shell:
        "gunzip -c {input} > {output}" 
#Step 2: QUALITY CONTROL tic
rule quality_control:
    input:
        "data/samples/{samples}.fastq"
    output:
        "data/samples/{samples}_fastqc.html"
    shell:
        "fastqc {input} | mv {output} > results/reports"

#If the genome is not indexed 
rule genome_index:
    input:
        "data/GCA_904849725_genome.fa"
    output:
        "data/GCA_genome.fa"
    shell:
        "bwa index -a bwtsw data/GCA_904849725_genome.fa"

rule run_all: --> VA AL PRINICPIO, PERO LO HE PUESTO ANTES DE MAPEAR Y ORDENAR PARA COMPROBARLO
    input:
        "results/sorted/{sample}.sorted.bam"

#STep 3: MAPPING tic
rule map_reads:
    input:
        "data/GCA_904849725_genome.fa",
        "data/samples/{sample}.fastq"
    output:
        "results/mapped/{sample}.bam"
    conda:
        "env/mapping.yaml"
    shell:
        "bwa mem {input} | samtools view -Sb - > {output}"
#Step 4: SORT ALIGNMENT
rule sort_bam:
    input:
        "results/mapped/{sample}.bam"
    output:
        "results/sorted/{sample}.sorted.bam"
    conda:
        "env/mapping.yaml"
    shell:
        "samtools sort -o {output} {input}"

rule run_all:
    input:
        "results/sorted/{sample}.sorted.bam"


#Step 3: MAPPING
rule map_reads:
    input:
        "data/GCA_904849725_genome.fa",
        "data/samples/{sample}.fastq"
    output:
        "results/mapped/{sample}.bam"
    conda:
        "env/mapping.yaml"
    shell:
        "bwa mem {input} | samtools view -Sb - > {output}"

#Step 4: SORT

rule sort_bam:
    input:
        "results/mapped/{sample}.bam"
    output:
        "results/sorted/{sample}_sorted.bam"
    conda:
        "env/mapping.yaml"
    shell:
        "samtools sort -o {output} {input}"

#Step 5: Depth calculation

rule depth_calc:
    input:
        "results/mapped/{sample}.bam"
    output:
        "results/depth/{sample}_depth.csv"
    shell:
        "samtools depth {input} > {output}"

#Step 6: Show th depth in a plot

rule plot_depth:
    input:
        "results/depth/{sample}_depth.csv"
    output:
        "results/depth/plots/{sample}.svg"
    script:
        "plot-depth.py"


