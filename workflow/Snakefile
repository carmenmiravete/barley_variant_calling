configfile: "config/config.yaml"

#Step 0: THIS IS TO RUN ALL THE RULES THAT WE ARE INTERESTED IN 
rule all:
   input:
        expand("data/samples/{sample}_{unit}_fastqc.html",sample=config["samples"], unit=config["units"]),
        expand("data/samples/{sample}_{unit}_fastqc.zip",sample=config["samples"], unit=config["units"]),
        expand("results/depth/plots/{sample}.svg",sample=config["samples"]),
        expand("results/markdup/{sample}_nodup.bam.csi",sample=config["samples"]),
        expand("calls/{sample}.g.vcf",sample=config["samples"])


#Step 1: DESCOMPRESS 
rule descompress:
    input:
        gz1=expand("data/samples/{sample}{sep}1.fastq.gz",sample=config["samples"],sep=config["separation"]),
        gz2=expand("data/samples/{sample}{sep}2.fastq.gz", sample=config["samples"],sep=config["separation"])
    output:
        fq1=expand("data/samples/{sample}{sep}1.fastq",sample=config["samples"],sep=config["separation"]),
        fq2=expand("data/samples/{sample}{sep}2.fastq",sample=config["samples"],sep=config["separation"])
    shell:
        "gunzip -c {input.gz1} > {output.fq1} | gunzip -c {input.gz2} > {output.fq2}"



#Step 2: QUALITY CONTROL
rule quality_control:
    input:
        "data/samples/{sample}_{unit}.fastq",
    output:
        html="data/samples/{sample}_{unit}_fastqc.html",
        zip="data/samples/{sample}_{unit}_fastqc.zip",
    shell:
        "fastqc {input}"
  # wrapper: "0.74.0/bio/fastqc" This is another way to write the shell (where another author has done it)

#Step 3: INDEX GENOME
rule ref_genome:
    input:
        genome=config["genome"]
    shell:
        "bwa index -a bwtsw {input.genome}"

#Step 4: MAPPING

rule map_reads:
    input:
       genome=config["genome"],
       read1=expand("data/samples/{sample}{sep}1.fastq", sample=config["samples"],sep=config["separation"]), 
       read2=expand("data/samples/{sample}{sep}2.fastq", sample=config["samples"],sep=config["separation"])
    output:
       temp("results/mapped/{sample}_RG.bam")
    params:
        rg=r"-R '@RG\tID:Seq01a\tSM:sample_A_1_21\tPL:ILLUMINA'"
    conda:
       "env/mapping.yaml"
    threads: 16
    shell:
       "bwa mem {params.rg} -t {threads} {input.genome} {input.read1} {input.read2} > {output}"  

#STEP 5: SORT MAPPED READS

rule sort_bam:
    input:
        "results/mapped/{sample}_RG.bam"
    output:
        "results/sorted/{sample}_sorted.bam"
    conda:
        "env/mapping.yaml"
    shell:
        "samtools sort -o {output} {input}"

# Step 6: DEPTH CALC (To know the depth and make a representation)

rule depth_calc:
    input:
        "results/sorted/{sample}_sorted.bam"
    output:
        "results/depth/{sample}_depth.csv"
    shell:
        "samtools depth {input} > {output}"

#Representing the plot

rule plot_depth:
    input:
        "results/depth/{sample}_depth.csv"
    output:
        "results/depth/plots/{sample}.svg"
    script:
        "./scripts/plot-depth.py"        

#STEP 7: Mark duplicates  
rule mark_duplicates:
    input: 
        "results/sorted/{sample}_sorted.bam"
    output:
        marked_bam="results/markdup/{sample}_nodup.bam",
        metrics="results/markdup/{sample}_nodup.txt"
    shell:
        "java -jar /home/cmiravete/Descargas/picard.jar  MarkDuplicates -I {input} -O {output.marked_bam} -M {output.metrics}"

#STEP 8: INDEXING THE OUTPUT FILE 
#samtools index -c /home/cmiravete/project/snakemake-project/results/markdup/A_1_21_nodup.bam

rule samtools_index:
    input:
        marked_bam="results/markdup/{sample}_nodup.bam"
    output:
        "results/markdup/{sample}_nodup.bam.csi"
    shell:
        "samtools index -c {input.marked_bam} {output}"

#STEP 8: VARIANT CALLING

rule haplotype_caller:
    input:
        index="results/markdup/{sample}_nodup.bam.csi",
        bam="results/markdup/{sample}_nodup.bam",
        ref=config["genome"]
    output:
        "calls/{sample}.g.vcf"
    threads: 8 
    shell:
        "/home/cmiravete/Descargas/gatk-4.4.0.0/gatk --java-options  '-Xmx4g'  HaplotypeCaller -R {input.ref} -I {input.bam} -O {output} -ERC GVCF" 

